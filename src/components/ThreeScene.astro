---
// No frontmatter needed for this component
---

<div id="three-container"></div>

<script>
  import * as THREE from 'three';

  // Wait for the DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('three-container');
    if (!container) {
      console.error('Could not find three-container element');
      return;
    }

    // Initialize the scene
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x001e38); // Dark blue background
    const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    container.appendChild(renderer.domElement);

    // Check if we're on desktop or mobile
    const isDesktop = window.matchMedia("(min-width: 1024px)").matches;
    
    // Variables to hold our scene objects
    let animatedObject;
    const clock = new THREE.Clock();

    // Initialize either the flag (desktop) or stars (mobile)
    if (isDesktop) {
      initFlag();
    } else {
      initStars();
    }

    // Function to create flag
    function initFlag() {
      console.log("Initializing flag for desktop");
      // Create a simpler flag using standard materials instead of shaders
      const flagWidth = 15;
      const flagHeight = 7;
      const flagGeometry = new THREE.PlaneGeometry(flagWidth, flagHeight, 50, 30);
      
      // Use direct URL to flag texture to ensure it loads
      const textureLoader = new THREE.TextureLoader();
      const flagTextureUrl = 'https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/1920px-Flag_of_the_United_States.svg.png';
      
      textureLoader.load(
        flagTextureUrl, 
        // Success callback
        (texture) => {
          const flagMaterial = new THREE.MeshStandardMaterial({
            side: THREE.DoubleSide,
            map: texture,
            roughness: 0.5,
            metalness: 0.1,
          });
          
          const flag = new THREE.Mesh(flagGeometry, flagMaterial);
          // Position flag at center of scene, facing camera directly
          flag.position.set(0, 0, 0);
          scene.add(flag);
          animatedObject = {
            type: 'flag',
            object: flag,
            geometry: flagGeometry
          };
        },
        // Progress callback
        undefined,
        // Error callback
        (error) => {
          console.error("Error loading flag texture:", error);
          // Fallback to stars if flag fails to load
          initStars();
        }
      );

      // Add ambient light
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
      scene.add(ambientLight);
      
      // Add directional light (like sun)
      const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
      directionalLight.position.set(0, 0, 5); // Light from camera direction
      scene.add(directionalLight);

      // Add a subtle point light for highlights
      const pointLight = new THREE.PointLight(0xffffff, 0.7, 30);
      pointLight.position.set(0, 0, 10);
      scene.add(pointLight);

      // Position camera directly in front of flag
      camera.position.set(0, 0, 6);
      camera.lookAt(0, 0, 0);
    }

    // Function to create stars
    function initStars() {
      console.log("Initializing stars for mobile");
      // Create particles for stars
      const particlesGeometry = new THREE.BufferGeometry();
      const particlesCount = 2000;
      
      const posArray = new Float32Array(particlesCount * 3);
      for(let i = 0; i < particlesCount * 3; i++) {
        posArray[i] = (Math.random() - 0.5) * 30;
      }
      
      particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
      
      const particlesMaterial = new THREE.PointsMaterial({
        size: 0.02,
        color: 0xffffff,
        transparent: true,
        opacity: 0.8,
        blending: THREE.AdditiveBlending,
      });
      
      const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
      scene.add(particlesMesh);

      animatedObject = {
        type: 'stars',
        object: particlesMesh
      };

      // Position camera for stars
      camera.position.set(0, 0, 5);
      camera.lookAt(0, 0, 0);

      // Add subtle ambient light
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.2);
      scene.add(ambientLight);
    }

    // Handle window resize
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
      
      // Check if we need to switch between flag and stars
      const wasDesktop = isDesktop;
      const newIsDesktop = window.matchMedia("(min-width: 1024px)").matches;
      
      if (wasDesktop !== newIsDesktop) {
        // Clear scene of old objects
        if (animatedObject) {
          scene.remove(animatedObject.object);
        }
        
        // Reinitialize appropriate visualization
        if (newIsDesktop) {
          initFlag();
        } else {
          initStars();
        }
      }
    });

    // Animation loop
    function animate() {
      requestAnimationFrame(animate);
      
      const elapsedTime = clock.getElapsedTime();
      
      // Animation based on type of background
      if (animatedObject) {
        if (animatedObject.type === 'flag') {
          // Animate flag waves
          const vertices = animatedObject.geometry.attributes.position.array;
          for (let i = 0; i < vertices.length; i += 3) {
            const x = vertices[i];
            const y = vertices[i+1];
            
            // Calculate wave effect
            const waveStrength = 0.6; // Consistent wave across the flag
            
            // Apply multiple wave frequencies for realistic movement
            const wave1 = Math.sin(x * 0.5 + elapsedTime * 1.5) * 0.3 * waveStrength;
            const wave2 = Math.sin(x * 0.8 + y * 1.0 + elapsedTime * 2.0) * 0.2 * waveStrength;
            
            // Apply to z-coordinate for waving effect
            vertices[i+2] = wave1 + wave2;
          }
          
          // Flag geometry needs to be updated
          animatedObject.geometry.attributes.position.needsUpdate = true;
          
          // Very subtle movement of the flag position for more natural effect
          animatedObject.object.position.y = Math.sin(elapsedTime * 0.3) * 0.1;
        } 
        else if (animatedObject.type === 'stars') {
          // Rotate the stars slowly
          animatedObject.object.rotation.x = elapsedTime * 0.05;
          animatedObject.object.rotation.y = elapsedTime * 0.03;
        }
      }
      
      renderer.render(scene, camera);
    }
    
    animate();
  });
</script>

<style>
  #three-container {
    width: 100%;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
  }
  
  /* Apply media query for script detection fallback */
  @media (max-width: 1023px) {
    #three-container canvas {
      background-color: #001e38;
    }
  }
</style>
